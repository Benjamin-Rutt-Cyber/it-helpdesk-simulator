version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: it_helpdesk_simulator_staging
      POSTGRES_USER: staging_user
      POSTGRES_PASSWORD: staging_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/prisma/schema.prisma:/docker-entrypoint-initdb.d/schema.prisma
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user -d it_helpdesk_simulator_staging"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://staging_user:staging_password@database:5432/it_helpdesk_simulator_staging
      REDIS_URL: redis://redis:6379
    env_file:
      - .env.staging
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_API_URL: http://api:3001
    env_file:
      - .env.staging
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: helpdesk-staging